{"version":3,"file":"static/js/481.15ae6b69.chunk.js","mappings":"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","sources":["components/custom-hooks/speech-to-text.js","components/elements/job-info/job-info.js","components/elements/additional-info/additional-info.js","components/views/home.js"],"sourcesContent":["import { useState, useRef } from 'react';\r\n\r\nconst useSpeechToText = () => {\r\n    const [text, setText] = useState('');\r\n    const [isListening, setIsListening] = useState(false);\r\n    const recognitionRef = useRef(null); // Store recognition instance\r\n    const silenceTimer = useRef(null); // Store silence timer\r\n\r\n    const startListening = () => {\r\n        if (!('webkitSpeechRecognition' in window)) {\r\n            alert('Web Speech API is not supported in this browser');\r\n            return;\r\n        }\r\n\r\n        // Initialize recognition if not already initialized\r\n        recognitionRef.current = new window.webkitSpeechRecognition();\r\n        recognitionRef.current.continuous = true;\r\n        recognitionRef.current.lang = 'en-US';\r\n\r\n        recognitionRef.current.onresult = (event) => {\r\n            const transcript = Array.from(event.results)\r\n                .map((result) => result[0].transcript)\r\n                .join('');\r\n            setText(transcript);\r\n\r\n            // Reset silence timer on every result\r\n            resetSilenceTimer();\r\n        };\r\n\r\n        recognitionRef.current.onerror = (event) => {\r\n            console.error('Speech recognition error:', event.error);\r\n            stopListening();\r\n        };\r\n\r\n        recognitionRef.current.onend = () => {\r\n            console.log('Recognition stopped');\r\n            setIsListening(false);\r\n        };\r\n\r\n        recognitionRef.current.start();\r\n        setIsListening(true);\r\n        resetSilenceTimer(); // Start silence timer\r\n    };\r\n\r\n    const resetSilenceTimer = () => {\r\n        if (silenceTimer.current) {\r\n            clearTimeout(silenceTimer.current);\r\n        }\r\n\r\n        silenceTimer.current = setTimeout(() => {\r\n            console.log('No speech detected for 20 seconds. Stopping recognition.');\r\n            stopListening();\r\n        }, 1000 * 20); // 10 seconds timeout\r\n    };\r\n\r\n    const stopListening = () => {\r\n        if (recognitionRef.current) {\r\n            recognitionRef.current.stop();\r\n            recognitionRef.current = null; // Clear recognition instance\r\n        }\r\n\r\n        if (silenceTimer.current) {\r\n            clearTimeout(silenceTimer.current);\r\n            silenceTimer.current = null; // Clear silence timer\r\n        }\r\n\r\n        setIsListening(false);\r\n    };\r\n\r\n    return { isListening, text, startListening, stopListening };\r\n};\r\n\r\nexport default useSpeechToText;\r\n","import * as React from \"react\";\r\n//MUI\r\nimport Box from \"@mui/material/Box\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\n//UI\r\nimport { ColorButton } from \"../button\";\r\n//Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateField } from \"../../../redux/slice/job-info-slice\";\r\n// router\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function JobInfo() {\r\n\r\n    let jobInfo = useSelector(state => state.job_info);\r\n    let DISPATCH = useDispatch();\r\n    let Navigate = useNavigate();\r\n\r\n    const handleSubmit = (event) => {\r\n        event?.preventDefault();\r\n        Navigate('/interview')\r\n    };\r\n    const handleUpdate = (event, key) => {\r\n        DISPATCH(updateField({ string: event.target.value, key }))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Stack spacing={2}>\r\n                <Box sx={{ display: { xs: \"block\", md: \"flex\" }, gap: 4 }}>\r\n                    <TextField\r\n                        value={jobInfo?.jobRole || \"\"}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Job role\"\r\n                        variant=\"standard\"\r\n                        required\r\n                        onChange={(event) => handleUpdate(event, \"jobRole\")}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ marginTop: \"2rem !important\" }}>\r\n                    <FormControl>\r\n                        <FormLabel>Experienced *</FormLabel>\r\n                        <RadioGroup row value={jobInfo?.experienced || \"\"}\r\n                            onChange={(event) => handleUpdate(event, \"experienced\")}\r\n                        >\r\n                            <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                            <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: { xs: \"block\", md: \"flex\" },\r\n                        gap: 4,\r\n                        margin: 0,\r\n                    }}\r\n                >\r\n                    <TextField sx={{ display: jobInfo?.experienced == \"yes\" ? \"block\" : \"none\" }}\r\n                        value={jobInfo?.yearsOfExperience || \"\"}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Years of experience\"\r\n                        variant=\"standard\"\r\n                        required={jobInfo?.experienced == \"yes\"}\r\n                        onChange={(event) => handleUpdate(event, \"yearsOfExperience\")}\r\n                    />\r\n                    <TextField\r\n                        value={jobInfo?.Technology || \"\"}\r\n                        sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Technolagy (optional)\"\r\n                        variant=\"standard\"\r\n                        onChange={(event) => handleUpdate(event, \"Technology\")}\r\n                    />\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: { xs: \"block\", md: \"flex\" },\r\n                        gap: 4,\r\n                        margin: 0,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        value={jobInfo?.skills || \"\"}\r\n                        // sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Skills (optional)\"\r\n                        variant=\"standard\"\r\n                        onChange={(event) => handleUpdate(event, \"skills\")}\r\n                    />\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: { xs: \"block\", md: \"flex\" },\r\n                        gap: 4,\r\n                        margin: 0,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        value={jobInfo?.companyName || \"\"}\r\n                        // sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Company Name (Target company)\"\r\n                        variant=\"standard\"\r\n                        required\r\n                        onChange={(event) => handleUpdate(event, \"companyName\")}\r\n                    />\r\n                    <TextField\r\n                        value={jobInfo?.salaryLevel || \"\"}\r\n                        sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Salary Level\"\r\n                        variant=\"standard\"\r\n                        required\r\n                        onChange={(event) => handleUpdate(event, \"salaryLevel\")}\r\n                    />\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: { xs: \"block\", md: \"flex\" },\r\n                        gap: 4,\r\n                        margin: 0,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        value={jobInfo?.degree || \"\"}\r\n                        // sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Degree\"\r\n                        variant=\"standard\"\r\n                        onChange={(event) => handleUpdate(event, \"degree\")}\r\n                    />\r\n                    <TextField\r\n                        value={jobInfo?.education || \"\"}\r\n                        sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Education\"\r\n                        variant=\"standard\"\r\n                        onChange={(event) => handleUpdate(event, \"education\")}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <ColorButton sx={{ marginTop: 2 }} type=\"submit\" variant=\"outlined\">Start Interview</ColorButton>\r\n                </Box>\r\n            </Stack>\r\n        </form>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Stack,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { APP_COLORS } from \"../../../theme/colors\";\r\nimport { ColorButton } from \"../button\";\r\n//Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateField } from \"../../../redux/slice/job-info-slice\";\r\n// router\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function AdditionalInfo() {\r\n    let jobInfo = useSelector((state) => state.job_info);\r\n    let DISPATCH = useDispatch();\r\n    let Navigate = useNavigate();\r\n\r\n    const handleSubmit = (event) => {\r\n        event?.preventDefault();\r\n        Navigate('/interview')\r\n    };\r\n\r\n    const handleUpdate = (event, key) => {\r\n        DISPATCH(updateField({ string: event.target.value, key }));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Box>\r\n                <Box marginBottom={2}>\r\n                    <center>\r\n                        <Typography variant=\"button\" sx={{ color: APP_COLORS.PRIMARY }}>\r\n                            Your Privacy is Our Priority\r\n                        </Typography>\r\n                    </center>\r\n                    <Typography variant=\"body1\" marginTop={2}>\r\n                        We never store or share your data. The information you provide, such\r\n                        as your name and last project details, is used solely to generate\r\n                        interview questions tailored to your profile. Once the interview\r\n                        session is complete, your data is not retained.\r\n                        <br /> Feel confident and focus on your preparation! 🚀\r\n                    </Typography>\r\n                </Box>\r\n                <Stack spacing={2}>\r\n                    <Box sx={{ display: { xs: \"block\", md: \"flex\" }, gap: 4 }}>\r\n                        <TextField\r\n                            value={jobInfo?.name || \"\"}\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            onChange={(event) => handleUpdate(event, \"name\")}\r\n                        />\r\n                        <TextField\r\n                            value={jobInfo?.lastProjectName || \"\"}\r\n                            sx={{ marginTop: { md: 0, xs: 2 } }}\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            label=\"Last Project Name\"\r\n                            variant=\"standard\"\r\n                            onChange={(event) => handleUpdate(event, \"lastProjectName\")}\r\n                        />\r\n                    </Box>\r\n                    <Box>\r\n                        <FormControl>\r\n                            <FormLabel>Required interview type (Technical or HR)</FormLabel>\r\n                            <RadioGroup\r\n                                row\r\n                                value={jobInfo?.interviewType || \"\"}\r\n                                onChange={(event) => handleUpdate(event, \"interviewType\")}\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Tech\"\r\n                                    control={<Radio />}\r\n                                    label=\"Technical\"\r\n                                />\r\n                                <FormControlLabel value=\"HR\" control={<Radio />} label=\"HR\" />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Box>\r\n                    <Box>\r\n                        <TextField value={jobInfo?.jobDescription || \"\"}\r\n                            fullWidth\r\n                            label=\"Job description (copy and past)\"\r\n                            multiline\r\n                            maxRows={100}\r\n                            onChange={(event) => handleUpdate(event, \"jobDescription\")}\r\n                        />\r\n                    </Box>\r\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <ColorButton sx={{ marginTop: 2 }} type=\"submit\" variant=\"outlined\">\r\n                            Start Interview\r\n                        </ColorButton>\r\n                    </Box>\r\n                </Stack>\r\n            </Box>\r\n        </form>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport TabContext from \"@mui/lab/TabContext\";\r\nimport TabList from \"@mui/lab/TabList\";\r\nimport TabPanel from \"@mui/lab/TabPanel\";\r\nimport { Button, Typography } from \"@mui/material\";\r\n\r\nimport { APP_COLORS } from \"../../theme/colors\";\r\nimport JobInfo from \"../elements/job-info/job-info\";\r\nimport AdditionalInfo from \"../elements/additional-info/additional-info\";\r\nimport useSpeechToText from \"../custom-hooks/speech-to-text\";\r\n\r\nimport { useEffect } from \"react\"\r\n\r\nexport default function Home() {\r\n    //states\r\n    const [value, setValue] = React.useState(\"1\");\r\n\r\n    //event handlers\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    let { isListening, startListening, stopListening, text } = useSpeechToText()\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            startListening();\r\n        }, 5000)\r\n    }, [])\r\n\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"h6\" sx={{ color: APP_COLORS.PRIMARY }}>Welcome to the AI Interview Preparation Tool!</Typography>\r\n            <Typography variant=\"body1\" sx={{ fontWeight: 'medium', }}>To ensure you get the most relevant and tailored interview questions, please provide accurate and detailed job information.</Typography>\r\n            <Typography variant=\"body1\" sx={{ fontWeight: 'medium', }}>Enter your own job profile details, including role, experience level, education, and key skills.</Typography>\r\n\r\n            <Box boxShadow={1} padding={2} marginTop={2}>\r\n                <Box sx={{ width: \"100%\", typography: \"body1\" }}>\r\n                    <TabContext value={value}>\r\n                        <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n                            <TabList onChange={handleChange}>\r\n                                <Tab label=\"Job Info\" value=\"1\" />\r\n                                <Tab label=\"Additional Info\" value=\"2\" />\r\n                            </TabList>\r\n                        </Box>\r\n                        <TabPanel value=\"1\">\r\n                            <JobInfo />\r\n                        </TabPanel>\r\n                        <TabPanel value=\"2\">\r\n                            <AdditionalInfo />\r\n                        </TabPanel>\r\n                    </TabContext>\r\n                </Box>\r\n            </Box>\r\n            <br />\r\n            {/* \r\n            SPEECH <br />\r\n            {\r\n                isListening ? \"Listening\" : \"Start\"\r\n            }\r\n            <br />\r\n            {\r\n                text\r\n            }\r\n            <br />\r\n            <Button onClick={() => startListening()}>\r\n                start recording\r\n            </Button>\r\n            <br />\r\n            <br /> */}\r\n        </Box>\r\n    );\r\n}\r\n"],"names":["useSpeechToText","text","setText","useState","isListening","setIsListening","recognitionRef","useRef","silenceTimer","resetSilenceTimer","current","clearTimeout","setTimeout","console","log","stopListening","stop","startListening","window","webkitSpeechRecognition","continuous","lang","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","onend","start","alert","JobInfo","jobInfo","useSelector","state","job_info","DISPATCH","useDispatch","Navigate","useNavigate","handleUpdate","key","updateField","string","target","value","_jsx","onSubmit","preventDefault","children","_jsxs","Stack","spacing","Box","sx","display","xs","md","gap","TextField","jobRole","size","fullWidth","label","variant","required","onChange","marginTop","FormControl","FormLabel","RadioGroup","row","experienced","FormControlLabel","control","Radio","margin","yearsOfExperience","Technology","skills","companyName","salaryLevel","degree","education","justifyContent","ColorButton","type","AdditionalInfo","marginBottom","Typography","color","APP_COLORS","PRIMARY","name","lastProjectName","interviewType","jobDescription","multiline","maxRows","Home","setValue","React","useEffect","fontWeight","boxShadow","padding","width","typography","TabContext","borderBottom","borderColor","TabList","handleChange","newValue","Tab","TabPanel"],"sourceRoot":""}